getwd()
setwd("Desktop/")
ls
csvData <- read.csv("result.csv")
View(csvData)
retreatCounts <- csvData[csvData$type == 'retreatCounts']
retreatCounts <- csvData[csvData$type=='retreatCounts',]
View(retreatCounts)
retreatCountsReduced <- csvData[csvData$type == 'retreatCounts', 4,10,11,12]
retreatCountsReduced <- csvData[csvData$type == 'retreatCounts', 4,10:12]
retreatCountsReduced <- csvData[csvData$type == 'retreatCounts', 10:12]
View(retreatCountsReduced)
retreatCountsReduced <- csvData[csvData$type == 'retreatCounts', 4&10:12]
View(retreatCountsReduced)
library(data.table)
install.packages(data.table)
View(retreatCounts)
install.packages("table.data")
install.packages("data.table")
library(data.table)
data.table(csvData)
csvDataTable <- data.table(csvData)
View(csvDataTable)
retreatCountsByPersonAndTest <- csvDataTable[csvDataTable$type=='retreatCounts',MeanRightRetreat:=mean(rightRetreats), MeanWrongRetreats:=mean(wrongRetreats), MeanDuplicateRetreats:=mean(duplicateRetreats), by=list(person,test)]
retreatCountsByPersonAndTest <- csvDataTable[csvDataTable$type=='retreatCounts',MeanRightRetreat:=mean(rightRetreats), by=list(person,test)]
View(retreatCountsReduced)
View(retreatCounts)
retreatCountsByPerson <- csvDataTable[csvDataTable$type=='retreatCounts' & test != 'componentTest',MeanRightRetreat:=mean(rightRetreats), by=list(person)]
View(retreatCountsReduced)
View(retreatCountsByPerson)
retreatCountsByPerson <- retreatCountsByPerson[retreatCountsByPerson$type == 'retreatCounts']
View(retreatCountsByPersonAndTest)
1:4
1,4
list(1,4)
View(retreatCountsReduced)
csvData[csvData$type == "retreatCounts",c("person", "rightRetreats", "wrongRetreats", "duplicateRetreats", "test")]
retreatCountsByPersonAndTest <- csvData[csvData$type == "retreatCounts",c("person", "rightRetreats", "wrongRetreats", "duplicateRetreats", "test")]
retreatCountsByPersonAndTest <- data.table(retreatCountsByPersonAndTest)
retreatCountsByPerson[,c(meanRight:=mean(rightRetreats), meanWrong:=mean(wrongRetreats), meanDuplicate:=mean(duplicateRetreats)), by="person"]
retreatCountsByPerson[,c(meanRight:=mean("rightRetreats"), meanWrong:=mean("wrongRetreats"), meanDuplicate:=mean("duplicateRetreats")), by="person"]
is.data.table(retreatCountsByPersonAndTest)
retreatCountsByPersonAndTest[,c(meanRight:=mean(rightRetreats), meanWrong:=mean(wrongRetreats), meanDuplicate:=mean(duplicateRetreats)), by="person"]
mean(retreatCountsByPersonAndTest[,2:4])
retreatCountsByPersonAndTest[,2:4]
retreatCountsByPersonAndTest[,meanRight:=mean("rightRetreats"), by="person"]
warnings()
colMeans(retreatCountsByPersonAndTest)
colMeans(retreatCountsByPersonAndTest[sapply(retreatCountsByPersonAndTest, is.numeric)])
sapply(Filter(is.numeric, retreatCountsByPersonAndTest), mean)
colMeans(retreatCountsByPersonAndTest, na.rm = TRUE)
retreatCountsByPersonAndTest
retreatCountsByPersonAndTest <- retreatCountsByPersonAndTest(,c("person", "rightRetreats", "wrongRetreats", "duplicateRetreats"))
retreatCountsByPersonAndTest <- retreatCountsByPersonAndTest[,c("person", "rightRetreats", "wrongRetreats", "duplicateRetreats")]
retreatCountsByPersonAndTest
retreatCountsByPersonAndTest[,sapply(Filter(is.numeric, retreatCountsByPersonAndTest), mean), by="person"]
sapply(Filter(is.numeric, retreatCountsByPersonAndTest), mean)
retreatCountsByPersonAndTest
sapply(retreatCountsByPersonAndTest[,2:4], mean)
aggregate(retreatCountsByPersonAndTest[,-1], by=list(retreatCountsByPersonAndTest$person), mean)
retreatCountsByPersonAndTest <- csvData[csvData$type=="retreatCounts", c("person", "rightRetreats", "wrongRetreats", "duplicateRetreats", "test")]
retreatCountsByPersonAndTest
sumRetreatCountsByPerson <- aggregate(retreatCountsByPersonAndTest[,-1], by=list(retreatCountsByPersonAndTest$person), sum)
retreatCountsByPersonAndTest[,2:4] <- as.numeric(as.character(retreatCountsByPersonAndTest[,2:4]))
retreatCountsByPersonAndTest
retreatCountsByPersonAndTest <- csvData[csvData$type=="retreatCounts", c("person", "rightRetreats", "wrongRetreats", "duplicateRetreats", "test")]
retreatCountsByPersonAndTest
as.numeric(retreatCountsByPersonAndTest[,2])
as.numeric(retreatCountsByPersonAndTest[,2:4])
retreatCountsByPersonAndTest[,2] <- as.numeric(retreatCountsByPersonAndTest[,2])
retreatCountsByPersonAndTest[,3] <- as.numeric(retreatCountsByPersonAndTest[,3])
retreatCountsByPersonAndTest[,4] <- as.numeric(retreatCountsByPersonAndTest[,4])
sumRetreatCountsByPerson <- aggregate(retreatCountsByPersonAndTest[,-1], by=list(retreatCountsByPersonAndTest$person), sum)
meanRetreatCountsByPerson <- aggregate(retreatCountsByPersonAndTest[,-1], by=list(retreatCountsByPersonAndTest$person), mean())
meanRetreatCountsByPerson <- aggregate(retreatCountsByPersonAndTest[,-1], by=list(retreatCountsByPersonAndTest$person), mean
)
warnings
warnings()
sumRetreatCountsByPerson <- aggregate(retreatCountsByPersonAndTest[,2:4], by=list(retreatCountsByPersonAndTest$person), sum)
sumRetreatCountsByPerson
View(sumRetreatCountsByPerson)
meanRetreatCountsByTest <- aggregate(retreatCountsByPersonAndTest[,2:4], by=list(retreatCountsByPersonAndTest$test), mean)
View(meanRetreatCountsByTest)
sdRetreatCountsByTest <- aggregate(retreatCountsByPersonAndTest[,2:4], by=list(retrea#))
sdRetreatCountsByTest <- aggregate(retreatCountsByPersonAndTest[,2:4], by=list(retreatCountsByPersonAndTest$test), sd)
View(sdRetreatCountsByTest)
name(meanRetreatCountsByPerson)
name(meanRetreatCountsByTest)
colnames(meanRetreatCountsByTest)
colnames(meanRetreatCountsByTest)[1] <- "test"
setnames(meanRetreatCountsByTest, old = c("rightRetreats", "wrongRetreats", "duplicateRetreats"), new = c("meanRight", "meanWrong", "meanDuplicate"))
colnames(meanRetreatCountsByTest)[2:4] <- c("meanRight", "meanWrong", "meanDuplicate")
retreatCountsWithMean <- merge(retreatCountsByPersonAndTest, meanRetreatCountsByTest)
View(retreatCountsWithMean)
retreatCountsWithMeanAndSd <- merge(merge(retreatCountsByPersonAndTest, meanRetreatCountsByTest), sdRetreatCountsByTest)
View(retreatCountsWithMeanAndSd)
colnames(sdRetreatCountsByTest)[2:4] <- c("sdRight", "sdWrong", "sdDuplicate")
retreatCountsWithMeanAndSd <- merge(merge(retreatCountsByPersonAndTest, meanRetreatCountsByTest), sdRetreatCountsByTest)
View(retreatCountsWithMeanAndSd)
colnames(sdRetreatCountsByTest) <- c("test", "sdRight", "sdWrong", "sdDuplicate")
retreatCountsWithMeanAndSd <- merge(merge(retreatCountsByPersonAndTest, meanRetreatCountsByTest), sdRetreatCountsByTest)
View(retreatCountsWithMeanAndSd)
csvDataTable <- Nile
sumRetreatsPerPerson <- aggregate(retreatCountsWithMeanAndSd[,3:5], by = list(retreatCountsWithMeanAndSd$person)
sumRetreatsByPerson <- aggregate(retreatCountsWithMeanAndSd[,3:5], by = list(retreatCountsWithMeanAndSd$person), sum)
View(sumRetreatsByPerson)
colnames(sumRetreatsByPerson)[1] <- c("person")
sumRetreatsByPerson
barplot(sumRetreatsByPerson$person, xlab = "rightRetreats")
barplot(table(sumRetreatsByPerson$person)
)
barplot(table(sumRetreatsByPerson$person), xlab = "rightRetreats")
barplot(table(sumRetreatsByPerson$rightRetreats), xlab = "rightRetreats")
segueCountsByPersonAndTest <- csvData[csvData$type=="segueCounts", c("person", "clicksOnTableView", "clicksOnCeList", "clicksOnStatusWidget", "test")]
View(retreatCountsReduced)
View(retreatCountsReduced)
View(segueCountsByPersonAndTest)
meanSegueCountsByTest <- aggregate(segueCountsByPersonAndTest[,2:4], by=list(segueCountsByPersonAndTest$test), mean)
View(meanSegueCountsByTest)
seguesWhileActiveByPersonAndTest <- csvData[csvData$type != "retreatCounts" & csvData$type != "segueCounts", c("person", "test", "type", "seguesWhileActive")]
View(seguesWhileActiveByPersonAndTest)
sumSeguesWhileActiveByPersonAndTest <- aggregate(seguesWhileActiveByPersonAndTest[,4], by = list(seguesWhileActiveByPersonAndTest$test, seguesWhileActiveByPersonAndTest$person))
sumSeguesWhileActiveByPersonAndTest <- aggregate(seguesWhileActiveByPersonAndTest[,4], by = list(seguesWhileActiveByPersonAndTest$test, seguesWhileActiveByPersonAndTest$person), sum)
View(sumSeguesWhileActiveByPersonAndTest)
sumSeguesWhileActiveByPersonAndTest <- aggregate(seguesWhileActiveByPersonAndTest[,4], by = list(seguesWhileActiveByPersonAndTest$person, seguesWhileActiveByPersonAndTest$test), sum)
colnames(sumSeguesWhileActiveByPersonAndTest) <- c("person", "test", "sumSeguesWhileActive")
seguesByPersonAndTest <- merge(sumSeguesWhileActiveByPersonAndTest, segueCountsByPersonAndTest)
View(seguesByPersonAndTest)
View(retreatCountsReduced)
retreatCountsReduced <- Nile
View(csvData)
View(meanRetreatCountsByPerson)
View(retreatCountsByPersonAndTest)
View(csvData)
View(retreatCounts)
View(meanRetreatCountsByPerson)
View(retreatCountsWithMeanAndSd)
View(sumRetreatsByPerson)
View(retreatCountsWithMeanAndSd)
View(seguesWhileActiveByPersonAndTest)
View(seguesByPersonAndTest)
plot(seguesByPersonAndTest$sumSeguesWhileActive, seguesByPersonAndTest$clicksOnCeList)
barplot(seguesByPersonAndTest$clicksOnCeList)
corr(seguesByPersonAndTest$clicksOnCeList, seguesByPersonAndTest$sumSeguesWhileActive)
cor(seguesByPersonAndTest$clicksOnCeList, seguesByPersonAndTest$sumSeguesWhileActive)
segueCountsByPersonAndTest <- csvData[csvData$type=="segueCounts", c("person", "clicksOnTableView", "clicksOnCeList", "clicksOnStatusWidget", "clicksOnAnotherGraph", "clicksOverall", "test")]
View(segueCountsByPersonAndTest)
seguesByPersonAndTest <- merge(sumSeguesWhileActiveByPersonAndTest, segueCountsByPersonAndTest)
plot(seguesByPersonAndTest$clicksOverall, seguesByPersonAndTest$sumSeguesWhileActive)
plot(seguesByPersonAndTest$clicksOverall, seguesByPersonAndTest$clicksOnCeList)
cor(seguesByPersonAndTest$clicksOverall, seguesByPersonAndTest$clicksOnCeList)
scenarioBlockData <- csvData[csvData$type!="retreatCounts" & csvData$type!="segueCounts", c("person", "test", "type", "onDetailView", "onGraph", "retreat", "onDetailViewUnimportant", "retreatUnimportant", "onDetailViewImportant", "retreatImportant")]
View(scenarioBlockData)
scenarioBlockDataWithoutImpVsUnimp <- scenarioBlockData[scenarioBlockData$type!="importantVsUnimportant"]
scenarioBlockDataWithoutImpVsUnimp <- scenarioBlockData[scenarioBlockData$type!="importantVsUnimportant"]
scenarioBlockDataWithoutImpVsUnimp <- scenarioBlockData[scenarioBlockData$type!="importantVsUnimportant",]
View(scenarioBlockDataWithoutImpVsUnimp)
componentTestData <- scenarioBlockData[scenarioBlockData$test=="componentTest", c("person", "test", "type", "onDetailView", "onGraph", "retreat", "onDetailViewUnimportant", "retreatUnimportant", "onDetailViewImportant", "retreatImportant")]
View(componentTestData)
scenarioBlockDataWithoutImpVsUnimp <- componentTestData[componentTestData$type!="importantVsUnimportant",]
View(scenarioBlockDataWithoutImpVsUnimp)
componentTestDataWithoutImpVsUnimp <- componentTestData[componentTestData$type!="importantVsUnimportant", c("person", "test", "type", "onDetailView", "onGraph", "retreat")]
View(componentTestDataWithoutImpVsUnimp)
componentTestCountsByType <- aggregate(componentTestDataWithoutImpVsUnimp[4:6], by=list(componentTestDataWithoutImpVsUnimp$person, componentTestDataWithoutImpVsUnimp$type), length(which(!is.na)))
componentTestCountsByType <- aggregate(componentTestDataWithoutImpVsUnimp[4:6], by=list(componentTestDataWithoutImpVsUnimp$person, componentTestDataWithoutImpVsUnimp$type), function(x) length(which(!is.na(x))))
View(componentTestCountsByType)
componentTestDataWithoutImpVsUnimp <- componentTestData[componentTestData$type!="importantVsUnimportant", c("person", "type", "onDetailView", "onGraph", "retreat")]
componentTestCountsByType <- aggregate(componentTestDataWithoutImpVsUnimp[3:5], by=list(componentTestDataWithoutImpVsUnimp$person, componentTestDataWithoutImpVsUnimp$type), function(x) length(which(!is.na(x))))
componentTestCountsByType <- aggregate(componentTestDataWithoutImpVsUnimp[3:5], by=list(componentTestDataWithoutImpVsUnimp$type), function(x) length(which(!is.na(x))))
colnames(componentTestCountsByType)[1] <- c("type")
View(componentTestData)
componentTestData <- scenarioBlockData[scenarioBlockData$test=="componentTest", c("person", "type", "onDetailView", "onGraph", "retreat", "onDetailViewUnimportant", "retreatUnimportant", "onDetailViewImportant", "retreatImportant")]
View(componentTestData)
componentTestCountsByType <- aggregate(componentTestData[3:9], by=list(componentTestDataWithoutImpVsUnimp$type), function(x) length(which(!is.na(x))))
componentTestCountsByType <- aggregate(componentTestData[3:9], by=list(componentTestData$type), function(x) length(which(!is.na(x))))
View(componentTestCountsByType)
colnames(componentTestCountsByType)[1] <- c("type")
speedTestData <- scenarioBlockData[scenarioBlockData$test!="componentTest", c("person", "type", "onDetailView", "retreat")]
View(speedTestData)
speedTestData <- scenarioBlockData[scenarioBlockData$test!="componentTest", c("person", "test", "type", "onDetailView", "retreat")]
test <- 5
test
speedTestData <- scenarioBlockData[scenarioBlockData$test!="componentTest", c("person", "test", "onDetailView", "retreat")]
speedTestCountsByTest <- aggregate(speedTestData[3:4], by=list(speedTestData$person, speedTestData$test), function(x) length(which(!is.na(x)))
speedTestCountsByTest <- aggregate(speedTestData[3:4], by=list(speedTestData$person, speedTestData$test), function(x) length(which(!is.na(x))))
View(speedTestCountsByTest)
colnames(speedTestCountsByTest)[1:2] <- c("person", "test")
speedTestCountsByTestAbsolute <- aggregate(speedTestData[3:4], by=list(speedTestData$person, speedTestData$test), function(x) length(which(!is.na(x))))
colsForRelativeNumbers <- c("onDetailView", "retreat")
speedTestCountsByTest[colsForRelativeNumbers] <- speedTestCountsByTestAbsolute[colsForRelativeNumbers]
speedTestCountsByTest <- aggregate(speedTestData[3:4], by=list(speedTestData$person, speedTestData$test), function(x) length(which(!is.na(x)))/length(x))
colnames(speedTestCountsByTest)[1:2] <- c("person", "test")
cor(speedTestCountsByTest$person, speedTestCountsByTest$onDetailView)
cor(speedTestCountsByTest$retreat, speedTestCountsByTest$onDetailView)
segues <- merge(sumSeguesWhileActiveByPersonAndTest, segueCountsByPersonAndTest)
View(segues)
seguesSpeedTests <- segues[segues$test!="compontentTest",]
View(seguesSpeedTests)
seguesSpeedTests <- segues[segues$test!="componentTest",]
seguesAndCounts <- merge(seguesSpeedTests, speedTestCountsByTest)
View(seguesAndCounts)
plot(seguesAndCounts$clicksOnCeList, seguesAndCounts$retreat)
cor(seguesAndCounts$clicksOnCeList, seguesAndCounts$retreat)
cor(seguesAndCounts$clicksOnCeList, seguesAndCounts$onDetailView)
speedTestCountsByTest <- aggregate(speedTestData[3:4], by=list(speedTestData$test), function(x) length(which(!is.na(x)))/length(x))
colnames(speedTestCountsByPersonAndTest)[1] <- c("test")
colnames(speedTestCountsByTest)[1] <- c("test")
speedTestData <- scenarioBlockData[csvData$test!="componentTest" & csvData$type!="retreatCounts" & csvData$type!="segueCounts", c("person", "test", "onDetailView", "retreat")]
speedTestMeansByPersonAndTest <- aggregate(speedTestData[3:4], by=list(speedTestData$person, speedTestData$test), mean)
View(speedTestMeansByPersonAndTest)
speedTestMeansByPersonAndTest <- aggregate(speedTestData[3:4], by=list(speedTestData$person, speedTestData$test), function(x) mean(which(!is.na(x))))
speedTestMeansByPersonAndTest <- aggregate(speedTestData[3:4], by=list(speedTestData$person, speedTestData$test), function(x) mean(which(!is.na(x))))
speedTestData <- scenarioBlockData[csvData$test!="componentTest" & csvData$type!="retreatCounts" & csvData$type!="segueCounts", c("person", "test", "onDetailView", "retreat")]
speedTestMeansByPersonAndTest <- aggregate(speedTestData[3:4], by=list(speedTestData$person, speedTestData$test), function(x) mean(which(!is.na(x))))
speedTestData <- scenarioBlockData[csvData$test!="componentTest" & csvData$type!="retreatCounts" & csvData$type!="segueCounts", c("person", "test", "onDetailView", "retreat")]
speedTestData <- csvData[csvData$test!="componentTest" & csvData$type!="retreatCounts" & csvData$type!="segueCounts", c("person", "test", "onDetailView", "retreat")]
speedTestMeansByPersonAndTest <- aggregate(speedTestData[3:4], by=list(speedTestData$person, speedTestData$test), function(x) mean(which(!is.na(x))))
View(speedTestMeansByPersonAndTest)
speedTestMeansByPersonAndTest <- aggregate(speedTestData[3:4], by=list(speedTestData$person, speedTestData$test), mean)
test <- [1,2,3,4]
test <- c(1,2,3,4)
mean(test)
length(test)
mean(which(test < 3))
which(test <3)
View(speedTestData)
speedTestMeansByPersonAndTest <- aggregate(speedTestData[3:4], by=list(speedTestData$person, speedTestData$test), function(x) mean(x))
speedTestMeansByPersonAndTest <- aggregate(speedTestData[3:4], by=list(speedTestData$person, speedTestData$test), function(x) mean(which(!is.na(x))))
speedTestMeansByPersonAndTest <- aggregate(speedTestData[3:4], by=list(speedTestData$person, speedTestData$test), function(x) mean(x))
testMean <- aggregate(speedTestData[3], by=list(speedTestData$person, speedTestData$test, function(x) mean(which(!is.na(x)))))
testMean <- aggregate(speedTestData[3:4], by=list(speedTestData$person, speedTestData$test, function(x) mean(which(!is.na(x)))))
testMean <- aggregate(speedTestData[3:4], by=list(speedTestData$person, speedTestData$test), function(x) mean(which(!is.na(x))))
View(testMean)
testMean <- aggregate(speedTestData[3], by=list(speedTestData$person, speedTestData$test), function(x) mean(which(!is.na(x))))
speedTestMeansByPersonAndTest <- aggregate(speedTestData[3:4], by=list(speedTestData$person, speedTestData$test), function(x) mean(x)
speedTestMeansByPersonAndTest <- aggregate(speedTestData[3:4], by=list(speedTestData$person, speedTestData$test), function(x) mean(x))
speedTestMeansByPersonAndTest <- aggregate(speedTestData[3:4], by=list(speedTestData$person, speedTestData$test), function(x) mean(x), na.action = na.omit)
speedTestMeansByPersonAndTest <- aggregate(speedTestData[3:4], by=list(speedTestData$person, speedTestData$test), function(x) mean(x), na.action("na.omit"))
speedTestMeansByPersonAndTest <- aggregate(speedTestData[3:4], by=list(speedTestData$person, speedTestData$test), FUN=mean, na.action = na.omit)
speedTestMeansByPersonAndTest <- aggregate(speedTestData[3:4], by=list(speedTestData$person, speedTestData$test), FUN=mean, na.rm = TRUE)
colnames(speedTestMeansByPersonAndTest)[1:2] <- c("person", "test")
speedTestSdByPersonAndTest <- aggregate(speedTestData[3:4], by=list(speedTestData$person, speedTestData$test), FUN=mean, na.rm = TRUE)
View(speedTestSdByPersonAndTest)
speedTestSdByPersonAndTest <- aggregate(speedTestData[3:4], by=list(speedTestData$person, speedTestData$test), FUN=sd, na.rm = TRUE)
colnames(speedTestMeansByPersonAndTest) <- c("person", "test", "meanDetail", "meanRetreat")
colnames(speedTestSdByPersonAndTest) <- c("person", "test", "sdDetail", "sdRetreat")
View(speedTestCountsByTest)
speedTestMeansByTest <- aggregate(speedTestData[3:4], by=list(speedTestData$person, speedTestData$test), FUN=mean, na.rm = TRUE)
View(speedTestMeansByTest)
speedTestMeansByTest <- aggregate(speedTestData[3:4], by=list(speedTestData$test), FUN=mean, na.rm = TRUE)
View(speedTestMeansByTest)
speedTestSdByTest <- aggregate(speedTestData[3:4], by=list(speedTestData$test), FUN=sd, na.rm = TRUE)
View(speedTestSdByTest)
colnames(speedTestMeansByTest) <- c("test", "meanDetail", "meanRetreat")
colnames(speedTestSdByTest) <- c("test", "sdDetail", "sdRetreat")
merge(merge(speedTestCountsByTest, speedTestMeansByTest), speedTestSdByTest)
speedTestStatsByTest <- merge(merge(speedTestCountsByTest, speedTestMeansByTest), speedTestSdByTest)
View(speedTestStatsByTest)
setwd("~/dev-uni/endstation/test/9-Florian")
library("data.table")
csvData <- read.csv("result.csv")
csvDataTable <- data.table(csvData)
numberOfParticipants <- 31
